package zog

type PegAssembler Peg {
  Current
}

Program <- Line+

Line <- Label? ws* Instruction? LineEnd                                   { p.Emit() }

Label <- <alpha alphanum*> ":"                                { p.Label(buffer[begin:end])} 
alphanum <- alpha / num
alpha <- [[a-z]]
num <- [0-9]

Comment <- (";" / "#") [^\n]*
LineEnd <- ws? Comment? ws? ("\n" / ":")

Instruction <- ( Assignment / Inc / Dec / Alu16 / Alu / BitOp / EDSimple / Simple / Jump / IO )

Assignment <- Load / Push / Pop / Ex

Load <- Load16 / Load8
Load8 <- "LD" ws Dst8 sep Src8                            { p.LD8() }
Load16 <- "LD" ws Dst16 sep Src16                         { p.LD16() }

Push <- "PUSH" ws Src16                                   { p.Push() }
Pop <- "POP" ws Dst16                                     { p.Pop() }
Ex <- "EX" ws Dst16 sep Src16                             { p.Ex() }

# Annoying parse ordering case, we can't have 8->16 or 16->8
# "INC IXY" and "INC IX"
# "INC C" and "INC BC"
# Ditto DEC
Inc <- Inc16Indexed8 / Inc16 / Inc8
Inc16Indexed8 <- "INC" ws ILoc8                           { p.Inc8() }
Inc8 <- "INC" ws Loc8                                     { p.Inc8() }
Inc16 <- "INC" ws Loc16                                   { p.Inc16() }

Dec <- Dec16Indexed8 / Dec16 / Dec8
Dec16Indexed8 <- "DEC" ws ILoc8                           { p.Dec8() }
Dec8 <- "DEC" ws Loc8                                     { p.Dec8() }
Dec16 <- "DEC" ws Loc16                                   { p.Dec16() }

Alu16 <- Add16 / Adc16 / Sbc16
Add16 <- "ADD" ws Dst16 sep Src16                         { p.Add16() }
Adc16 <- "ADC" ws Dst16 sep Src16                         { p.Adc16() }
Sbc16 <- "SBC" ws Dst16 sep Src16                         { p.Sbc16() }

Dst8 <- (Reg8 / Reg16Contents / nn_contents)              { p.Dst8() }
Src8 <- (n / Reg8 / Reg16Contents / nn_contents)          { p.Src8() }
Loc8 <- (Reg8 / Reg16Contents)                            { p.Loc8() }
Copy8 <- Reg8                                             { p.Copy8() }
ILoc8 <- IReg8                                            { p.Loc8() }

Reg8  <- <A / F / B / C / D / E / H / L / IReg8 / I / R>  { p.R8(buffer[begin:end]) }
IReg8 <- <IXH / IXL / IYH / IYL>                          { p.R8(buffer[begin:end]) }

Dst16 <- (Reg16 / nn_contents / Reg16Contents)            { p.Dst16() }
Src16 <- (Reg16 / nn / nn_contents)                       { p.Src16() }
Loc16 <- Reg16                                            { p.Loc16() }

Reg16 <- <AF_PRIME / AF / BC / DE / HL / SP / IReg16>       { p.R16(buffer[begin:end]) }
IReg16 <- <IX / IY>                                         { p.R16(buffer[begin:end]) }

Reg16Contents <- ( IndexedR16C / PlainR16C )              
PlainR16C <-    '(' Reg16 ')'                               { p.R16Contents() }
IndexedR16C <-  '(' IReg16 ws? disp ws? ')'                 { p.IR16Contents() }

n <- hexByteH / hexByte0x / decimalByte

nn <- hexWordH / hexWord0x

disp  <- signedHexByteH / signedHexByte0x / signedDecimalByte
signedDecimalByte <- <[-+]?[0-9]+>                            { p.DispDecimal(buffer[begin:end]) }
signedHexByteH <- <[-+]?[0-9a-fA-F]+> "h"                     { p.DispHex(buffer[begin:end]) }
signedHexByte0x <- <[-+]? "0x" [0-9a-fA-F]+>                  { p.Disp0xHex(buffer[begin:end]) }

hexByteH    <- <hexdigit hexdigit> "h"                        { p.Nhex(buffer[begin:end]) }
hexByte0x   <- "0x" <hexdigit hexdigit>                       { p.Nhex(buffer[begin:end]) }
decimalByte <- <[0-9]+>                                       { p.Ndec(buffer[begin:end]) }

hexWordH    <- <hexdigit hexdigit hexdigit hexdigit> "h"      { p.NNhex(buffer[begin:end]) }
hexWord0x   <- "0x" <hexdigit hexdigit hexdigit hexdigit>     { p.NNhex(buffer[begin:end]) }


nn_contents <- '(' nn ')'                                 { p.NNContents() }

Alu <- Add / Adc / Sub / Sbc / And / Xor / Or / Cp

Add <- "ADD" ws "A" sep Src8    { p.Accum("ADD") }
Adc <- "ADC" ws "A" sep Src8    { p.Accum("ADC") }
Sub <- "SUB" ws Src8            { p.Accum("SUB") }
Sbc <- "SBC" ws "A" sep Src8    { p.Accum("SBC") }
And <- "AND" ws Src8            { p.Accum("AND") }
Xor <- "XOR" ws Src8            { p.Accum("XOR") }
Or  <- "OR"  ws Src8            { p.Accum("OR") }
Cp  <- "CP"  ws Src8            { p.Accum("CP") }

BitOp <- Rot / Bit / Res / Set
Rot <- Rlc / Rrc / Rl / Rr / Sla / Sra / Sll / Srl
Rlc <- "RLC" ws Loc8 (sep Copy8)?            { p.Rot("RLC") }
Rrc <- "RRC" ws Loc8 (sep Copy8)?            { p.Rot("RRC") }
Rl  <- "RL"  ws Loc8 (sep Copy8)?            { p.Rot("RL") }
Rr  <- "RR"  ws Loc8 (sep Copy8)?            { p.Rot("RR") }
Sla <- "SLA" ws Loc8 (sep Copy8)?            { p.Rot("SLA") }
Sra <- "SRA" ws Loc8 (sep Copy8)?            { p.Rot("SRA") }
Sll <- "SLL" ws Loc8 (sep Copy8)?            { p.Rot("SLL") }
Srl <- "SRL" ws Loc8 (sep Copy8)?            { p.Rot("SRL") }

Bit <- "BIT" ws octaldigit sep Loc8                   { p.Bit() }
Res <- "RES" ws octaldigit sep Loc8 (sep Copy8)?      { p.Res() }
Set <- "SET" ws octaldigit sep Loc8 (sep Copy8)?      { p.Set() }

Simple <- Nop / Halt / Rlca / Rrca / Rla / Rra / Daa / Cpl / Scf / Ccf / Exx / Di / Ei

Nop  <- <"NOP">         { p.Simple(buffer[begin:end]) }
Halt <- <"HALT">        { p.Simple(buffer[begin:end]) }
Rlca <- <"RLCA">        { p.Simple(buffer[begin:end]) }
Rrca <- <"RRCA">        { p.Simple(buffer[begin:end]) }
Rla  <- <"RLA">         { p.Simple(buffer[begin:end]) }
Rra  <- <"RRA">         { p.Simple(buffer[begin:end]) }
Daa  <- <"DAA">         { p.Simple(buffer[begin:end]) }
Cpl  <- <"CPL">         { p.Simple(buffer[begin:end]) }
Scf  <- <"SCF">         { p.Simple(buffer[begin:end]) }
Ccf  <- <"CCF">         { p.Simple(buffer[begin:end]) }
Exx  <- <"EXX">         { p.Simple(buffer[begin:end]) }
Di   <- <"DI">          { p.Simple(buffer[begin:end]) }
Ei   <- <"EI">          { p.Simple(buffer[begin:end]) }

EDSimple <- Neg / Retn / Reti / Rrd / Rld / Im0 / Im1 / Im2 / Blit / BlitIO
Neg   <- <"NEG">        { p.EDSimple(buffer[begin:end]) }
Retn  <- <"RETN">       { p.EDSimple(buffer[begin:end]) }
Reti  <- <"RETI">       { p.EDSimple(buffer[begin:end]) }
Rrd   <- <"RRD">        { p.EDSimple(buffer[begin:end]) }
Rld   <- <"RLD">        { p.EDSimple(buffer[begin:end]) }
Im0   <- <"IM 0">       { p.EDSimple(buffer[begin:end]) }
Im1   <- <"IM 1">       { p.EDSimple(buffer[begin:end]) }
Im2   <- <"IM 2">       { p.EDSimple(buffer[begin:end]) }

Blit <- Ldir / Ldi / Cpir / Cpi / Lddr / Ldd / Cpdr / Cpd 
BlitIO <- Inir / Ini / Otir / Outi / Indr / Ind / Otdr / Outd 
Ldi   <- <"LDI">        {  p.EDSimple(buffer[begin:end]) }
Cpi   <- <"CPI">        {  p.EDSimple(buffer[begin:end]) }
Ini   <- <"INI">        {  p.EDSimple(buffer[begin:end]) }
Outi  <- <"OUTI">       {  p.EDSimple(buffer[begin:end]) }
Ldd   <- <"LDD">        {  p.EDSimple(buffer[begin:end]) }
Cpd   <- <"CPD">        {  p.EDSimple(buffer[begin:end]) }
Ind   <- <"IND">        {  p.EDSimple(buffer[begin:end]) }
Outd  <- <"OUTD">       {  p.EDSimple(buffer[begin:end]) }
Ldir  <- <"LDIR">       {  p.EDSimple(buffer[begin:end]) }
Cpir  <- <"CPIR">       {  p.EDSimple(buffer[begin:end]) }
Inir  <- <"INIR">       {  p.EDSimple(buffer[begin:end]) }
Otir  <- <"OTIR">       {  p.EDSimple(buffer[begin:end]) }
Lddr  <- <"LDDR">       {  p.EDSimple(buffer[begin:end]) }
Cpdr  <- <"CPDR">       {  p.EDSimple(buffer[begin:end]) }
Indr  <- <"INDR">       {  p.EDSimple(buffer[begin:end]) }
Otdr  <- <"OTDR">       {  p.EDSimple(buffer[begin:end]) }

Jump <- Rst / Call / Ret / Jp / Jr / Djnz

Rst   <- "RST" ws n                       { p.Rst() }
Call  <- "CALL" ws (cc sep)? Src16        { p.Call() }
Ret   <- "RET" (ws cc)?                   { p.Ret() }
Jp    <- "JP" ws (cc sep)? Src16          { p.Jp() }
Jr    <- "JR" ws (cc sep)? disp           { p.Jr() }
Djnz  <- "DJNZ" ws disp                   { p.Djnz() }


IO <- IN / OUT

IN   <- "IN" ws Reg8 sep Port                   { p.In() }
OUT  <- "OUT" ws Port sep Reg8                  { p.Out() }

Port <- "(C)" / '(' n ')'

sep <- ws? ',' ws?

ws <- ' '+

A <- "A"
F <- "F"
B <- "B"
C <- "C"
D <- "D"
E <- "E"
H <- "H"
L <- "L"
IXH <- "IXH"
IXL <- "IXL"
IYH <- "IYH"
IYL <- "IYL"
I <- "I"
R <- "R"

AF <- "AF"
AF_PRIME <- "AF'"
BC <- "BC"
DE <- "DE"
HL <- "HL"
IX <- "IX"
IY <- "IY"
SP <- "SP"


hexdigit <- [0-9] / [[a-f]]

octaldigit <- <[0-7]>                                       { p.ODigit(buffer[begin:end]) }

cc <- FT_NZ / FT_Z / FT_NC / FT_C / FT_PO / FT_PE / FT_P / FT_M
FT_NZ <-   "NZ" { p.Conditional(Not{FT_Z}) }
FT_Z  <-   "Z" { p.Conditional(FT_Z) }
FT_NC <-   "NC" { p.Conditional(Not{FT_C}) }
FT_C  <-   "C" { p.Conditional(FT_C) }
FT_PO <-   "PO" { p.Conditional(FT_PO) }
FT_PE <-   "PE" { p.Conditional(FT_PE) }
FT_P  <-   "P" { p.Conditional(FT_P) }
FT_M  <-   "M" { p.Conditional(FT_M) }

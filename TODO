DONE - add Read/Write16 (want it to read (PC))

DONE - Add a Run loop
  DONE- single byte instructions initially
  DONE - fetch, then execute instrucion
  DONE- gah. ok, look at the loc8 bit patterns for other instructions and work out categories
  DONE (LD src, dest has different bit patterns for src and dest, work out how many funcs we need for 3bits => reg)

DONE - Add a LD8 instruction which copies a single byte
  DONE - register to register
  DONE - and immediate constant

- Add basic assembler
  - no need for labels yet
  - need to expand instruction types with some kind of r, n, nn helpers
  - instructions need to be able to Encode themselves

DONE - test code needs to:
  DONE - run emulator with "exit on halt" debug flag set
    - or run one instruction at a time
    - and have an IsHalted() method (interrupts could unhalt?)
    - peek reg A or something
  - testcases {"LD A, 10", 10}

- pull out a general "hi3" string <-> num for logic ops etc
  - and use it to initialise the MakeParseAccum in AssemblyParser

- factor out common helper functions for assembler
- support more ops than ADD
- add tests for logic ops using assembler

DONE - add the arithmetic stuff
   - but parameterise the operation
   - so we don't have a type per instr
   - just a "two arg 8 bit"
   - and make LD an instance of it
   - pass in a func() to do the work on the ops?

- add some ad hoc tests for logic and arith ops
  - include desired flag outputs
    (set, cleared, unchanged (two tests needed!)) for all relephant flags

- add more complete flag handling
  - and some tests

- Add a RST16 hack which debug-prints contents of A?
  - need a way to run until test

- write a program which stores 0x16 to A then prints it


- add INC8 and DEC8

- add (HL) address mode to R8Loc

- add LD16, INC16, DEC16

- add DJNZ

profit
